/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTestDatumArgs } from "./CreateTestDatumArgs";
import { UpdateTestDatumArgs } from "./UpdateTestDatumArgs";
import { DeleteTestDatumArgs } from "./DeleteTestDatumArgs";
import { TestDatumFindManyArgs } from "./TestDatumFindManyArgs";
import { TestDatumFindUniqueArgs } from "./TestDatumFindUniqueArgs";
import { TestDatum } from "./TestDatum";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { TestDatumService } from "../testDatum.service";

@graphql.Resolver(() => TestDatum)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TestDatumResolverBase {
  constructor(
    protected readonly service: TestDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "read",
    possession: "any",
  })
  async _testDataMeta(
    @graphql.Args() args: TestDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TestDatum])
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "read",
    possession: "any",
  })
  async testData(
    @graphql.Args() args: TestDatumFindManyArgs
  ): Promise<TestDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TestDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "read",
    possession: "own",
  })
  async testDatum(
    @graphql.Args() args: TestDatumFindUniqueArgs
  ): Promise<TestDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestDatum)
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "create",
    possession: "any",
  })
  async createTestDatum(
    @graphql.Args() args: CreateTestDatumArgs
  ): Promise<TestDatum> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestDatum)
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "update",
    possession: "any",
  })
  async updateTestDatum(
    @graphql.Args() args: UpdateTestDatumArgs
  ): Promise<TestDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestDatum)
  @nestAccessControl.UseRoles({
    resource: "TestDatum",
    action: "delete",
    possession: "any",
  })
  async deleteTestDatum(
    @graphql.Args() args: DeleteTestDatumArgs
  ): Promise<TestDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job])
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async jobs(
    @graphql.Parent() parent: TestDatum,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
