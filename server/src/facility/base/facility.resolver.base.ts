/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFacilityArgs } from "./CreateFacilityArgs";
import { UpdateFacilityArgs } from "./UpdateFacilityArgs";
import { DeleteFacilityArgs } from "./DeleteFacilityArgs";
import { FacilityFindManyArgs } from "./FacilityFindManyArgs";
import { FacilityFindUniqueArgs } from "./FacilityFindUniqueArgs";
import { Facility } from "./Facility";
import { AssetFindManyArgs } from "../../asset/base/AssetFindManyArgs";
import { Asset } from "../../asset/base/Asset";
import { Contact } from "../../contact/base/Contact";
import { Company } from "../../company/base/Company";
import { FacilityService } from "../facility.service";

@graphql.Resolver(() => Facility)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FacilityResolverBase {
  constructor(
    protected readonly service: FacilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "read",
    possession: "any",
  })
  async _facilitiesMeta(
    @graphql.Args() args: FacilityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Facility])
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "read",
    possession: "any",
  })
  async facilities(
    @graphql.Args() args: FacilityFindManyArgs
  ): Promise<Facility[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Facility, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "read",
    possession: "own",
  })
  async facility(
    @graphql.Args() args: FacilityFindUniqueArgs
  ): Promise<Facility | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Facility)
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "create",
    possession: "any",
  })
  async createFacility(
    @graphql.Args() args: CreateFacilityArgs
  ): Promise<Facility> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,

        owner: args.data.owner
          ? {
              connect: args.data.owner,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Facility)
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "update",
    possession: "any",
  })
  async updateFacility(
    @graphql.Args() args: UpdateFacilityArgs
  ): Promise<Facility | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,

          owner: args.data.owner
            ? {
                connect: args.data.owner,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Facility)
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "delete",
    possession: "any",
  })
  async deleteFacility(
    @graphql.Args() args: DeleteFacilityArgs
  ): Promise<Facility | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Asset])
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async assets(
    @graphql.Parent() parent: Facility,
    @graphql.Args() args: AssetFindManyArgs
  ): Promise<Asset[]> {
    const results = await this.service.findAssets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Contact, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async contact(@graphql.Parent() parent: Facility): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async owner(@graphql.Parent() parent: Facility): Promise<Company | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
