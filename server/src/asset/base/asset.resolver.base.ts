/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAssetArgs } from "./CreateAssetArgs";
import { UpdateAssetArgs } from "./UpdateAssetArgs";
import { DeleteAssetArgs } from "./DeleteAssetArgs";
import { AssetFindManyArgs } from "./AssetFindManyArgs";
import { AssetFindUniqueArgs } from "./AssetFindUniqueArgs";
import { Asset } from "./Asset";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { Facility } from "../../facility/base/Facility";
import { AssetService } from "../asset.service";

@graphql.Resolver(() => Asset)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AssetResolverBase {
  constructor(
    protected readonly service: AssetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async _assetsMeta(
    @graphql.Args() args: AssetFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Asset])
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async assets(@graphql.Args() args: AssetFindManyArgs): Promise<Asset[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Asset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "own",
  })
  async asset(
    @graphql.Args() args: AssetFindUniqueArgs
  ): Promise<Asset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "create",
    possession: "any",
  })
  async createAsset(@graphql.Args() args: CreateAssetArgs): Promise<Asset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        facility: args.data.facility
          ? {
              connect: args.data.facility,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "update",
    possession: "any",
  })
  async updateAsset(
    @graphql.Args() args: UpdateAssetArgs
  ): Promise<Asset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          facility: args.data.facility
            ? {
                connect: args.data.facility,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Asset)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "delete",
    possession: "any",
  })
  async deleteAsset(
    @graphql.Args() args: DeleteAssetArgs
  ): Promise<Asset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job])
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async jobs(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contact])
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async poc(
    @graphql.Parent() parent: Asset,
    @graphql.Args() args: ContactFindManyArgs
  ): Promise<Contact[]> {
    const results = await this.service.findPoc(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Facility, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Facility",
    action: "read",
    possession: "any",
  })
  async facility(@graphql.Parent() parent: Asset): Promise<Facility | null> {
    const result = await this.service.getFacility(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
